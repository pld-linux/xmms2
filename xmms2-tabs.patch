--- xmms2-0.2DrJekyll/src/xmms/sample.genpy.orig	2007-05-20 17:55:40.000000000 +0200
+++ xmms2-0.2DrJekyll/src/xmms/sample.genpy	2023-05-14 18:51:40.261637819 +0200
@@ -152,10 +152,10 @@ def get_channelconv(numin, numout, t):
 		for a in range(numout):
 			out += "\t\tout[%d] = WRITE%s(temp[%d]);\n" % (a,t,a)
 	elif numin == 1 and numout == 2:
-       		out += "\t\tout[0] = WRITE%s(temp[0]);\n" % t
-       		out += "\t\tout[1] = WRITE%s(temp[0]);\n" % t
+		out += "\t\tout[0] = WRITE%s(temp[0]);\n" % t
+		out += "\t\tout[1] = WRITE%s(temp[0]);\n" % t
 	elif numin == 2 and numout == 1:
-       		out += "\t\tout[0] = WRITE%s((temp[0] + temp[1])/2);\n" % t
+		out += "\t\tout[0] = WRITE%s((temp[0] + temp[1])/2);\n" % t
 	else:
 		raise RuntimeError("go implement channelconversion from %d to %d channels" % (numin, numout))
 	return out
@@ -196,11 +196,11 @@ def make_conv(fields, curr):
 			out = re.sub(key,str(val),out)
 
 		out = re.sub("CONVERTER",
-			     get_channelconv(curr['INCHANNELS'],
-					     curr['OUTCHANNELS'],
-					     curr['OUTTYPE']),
-			     out)
-		
+			get_channelconv(curr['INCHANNELS'],
+				curr['OUTCHANNELS'],
+				curr['OUTTYPE']),
+			out)
+
 		return out
 
 
@@ -234,7 +234,7 @@ def make_switch(fields, curr):
 			val += indent + "case XMMS_SAMPLE_FORMAT_%s:\n" % a.upper()
 		else:
 			val += indent + "case %s:\n" % a
-       		val += make_switch(fields[1:], t)
+		val += make_switch(fields[1:], t)
 	val += indent + "}\n"
 	return val
 
