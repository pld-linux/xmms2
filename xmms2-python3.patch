--- xmms2-0.2DrGonzo/SConstruct.orig	2023-05-13 18:09:37.823372009 +0200
+++ xmms2-0.2DrGonzo/SConstruct	2023-05-13 18:32:37.612563716 +0200
@@ -5,7 +5,6 @@ import sys
 import SCons
 import re
 import string
-import new
 import gittools
 from marshal import dump
 
@@ -24,7 +23,7 @@ EnsurePythonVersion(2, 3)
 SConsignFile()
 
 def SimpleListOption(key, help, default=[]):
-	return(key, help, default, None, lambda val: string.split(val))
+	return(key, help, default, None, lambda val: val.split())
 
 
 default_pyrex = 'pyrexc'
@@ -36,7 +35,7 @@ if sys.platform == 'darwin':
 else:
 	default_cpppath = []
 
-opts = Options("options.cache")
+opts = Variables("options.cache")
 opts.Add('CC', 'C compiler to use')
 opts.Add('CXX', 'C++ compiler to use')
 opts.Add('LD', 'Linker to use')
@@ -56,10 +55,10 @@ opts.Add('INCLUDEDIR', 'specified includ
 opts.Add('RUBYARCHDIR', 'Path to install Ruby bindings')
 opts.Add('INSTALLDIR', 'install dir')
 opts.Add('PKGCONFIGDIR', 'Where should we put our .pc files?', '$PREFIX/lib/pkgconfig')
-opts.Add(BoolOption('SHOWCACHE', 'show what flags that lives inside cache', 0))
+opts.Add(BoolVariable('SHOWCACHE', 'show what flags that lives inside cache', 0))
 opts.Add(SimpleListOption('EXCLUDE', 'exclude these modules', []))
-opts.Add(BoolOption('CONFIG', 'run configuration commands again', 0))
-opts.Add(BoolOption('STATIC', 'Link everything static', 0))
+opts.Add(BoolVariable('CONFIG', 'run configuration commands again', 0))
+opts.Add(BoolVariable('STATIC', 'Link everything static', 0))
 
 # base CCPATH
 base_env = xmmsenv.XMMSEnvironment(options=opts)
@@ -72,7 +72,7 @@ except xmmsenv.ConfigError:
 		os.remove("config.cache")
 	except:
 		pass
-	print "OPTION CC MUST POINT TO A VALID C COMPILER!"
+	print("OPTION CC MUST POINT TO A VALID C COMPILER!")
 	sys.exit(-1)
 
 base_env.Append(CPPPATH=["#src/include"])
@@ -86,24 +85,24 @@ def do_subst_in_file(targetfile, sourcef
         then all instances of %VERSION% in the file will be replaced with 1.2345 etc.
         """
         try:
-            f = open(sourcefile, 'rb')
+            f = open(sourcefile, 'r', encoding='iso-8859-1')
             contents = f.read()
             f.close()
         except:
-            raise SCons.Errors.UserError, "Can't read source file %s"%sourcefile
+            raise SCons.Errors.UserError("Can't read source file %s"%sourcefile)
         for (k,v) in dict.items():
             contents = re.sub(k, v, contents)
         try:
-            f = open(targetfile, 'wb')
+            f = open(targetfile, 'w', encoding='iso-8859-1')
             f.write(contents)
             f.close()
         except:
-            raise SCons.Errors.UserError, "Can't write target file %s"%targetfile
+            raise SCons.Errors.UserError("Can't write target file %s"%targetfile)
         return 0 # success
  
 def subst_in_file(target, source, env):
-        if not env.has_key('SUBST_DICT'):
-            raise SCons.Errors.UserError, "SubstInFile requires SUBST_DICT to be set."
+        if "SUBST_DICT" not in env:
+            raise SCons.Errors.UserError("SubstInFile requires SUBST_DICT to be set.")
         d = dict(env['SUBST_DICT']) # copy it
         for (k,v) in d.items():
             if callable(v):
@@ -111,7 +110,7 @@ def subst_in_file(target, source, env):
             elif SCons.Util.is_String(v):
                 d[k]=env.subst(v)
             else:
-                raise SCons.Errors.UserError, "SubstInFile: key %s: %s must be a string or callable"%(k, repr(v))
+                raise SCons.Errors.UserError("SubstInFile: key %s: %s must be a string or callable"%(k, repr(v)))
         for (t,s) in zip(target, source):
             return do_subst_in_file(str(t), str(s), d)
  
@@ -161,7 +160,7 @@ config = base_env.SubstInFile("src/inclu
 try:
 	dump(base_env.config_cache, open("config.cache", "wb+"))
 except IOError:
-	print "Could not dump config.cache!"
+	print("Could not dump config.cache!")
 
 
 #### INSTALL HEADERS!
@@ -205,14 +204,14 @@ for p in pc_files:
 	base_env.Install("$PKGCONFIGDIR", p["name"]+".pc")
 
 
-print "====================================="
-print " Configuration printout"
-print "====================================="
-print "Enabled plugins:",
+print("=====================================")
+print(" Configuration printout")
+print("=====================================")
+print("Enabled plugins:", end="")
 foo = []
 map(lambda x: foo.append(x[x.rindex(os.sep)+1:]), base_env.plugins)
-print ", ".join(foo)
-print "Default output:", xmmsenv.default_output[1]
+print(", ".join(foo))
+print("Default output:", xmmsenv.default_output[1])
 
 base_env.add_script("startup.d", "src/clients/mdns/xmms2-mdns-launcher.sh")
 base_env.add_shared("mind.in.a.box-lament_snipplet.ogg")
--- xmms2-0.2DrGonzo/xmmsenv.py.orig	2023-05-13 18:32:56.662460514 +0200
+++ xmms2-0.2DrGonzo/xmmsenv.py	2023-05-13 18:33:57.138799553 +0200
@@ -5,8 +5,7 @@ import shutil
 import gzip
 from marshal import load
 from stat import *
-import operator
-from popen2 import popen3
+from subprocess import PIPE, Popen
 
 global_libpaths = ["/lib", "/usr/lib"]
 
@@ -15,8 +14,6 @@ default_output = (-1, "unknown")
 class ConfigError(Exception):
 	pass
 
-any = lambda x: reduce(operator.or_, x)
-
 
 def find_static_lib(env, lib):
 	libname = "lib%s.a" % lib
@@ -48,9 +45,9 @@ class Target:
 		self.globs['platform'] = env.platform
 		self.globs['ConfigError'] = ConfigError
 
-		x = file(target).read()
+		x = open(target).read()
 		if x[-1] != '\n':
-			print "Missing linebreak in %s" % target
+			print("Missing linebreak in %s" % target)
 			x += '\n'
 
 		c = compile(x, target, "exec")
@@ -101,14 +98,14 @@ class XMMSEnvironment(Environment):
 	def __init__(self, parent=None, options=None, **kw):
 		reconfigure = self.options_changed(options, ['INSTALLPATH'])
 		Environment.__init__(self, options=options, ENV=os.environ)
-		apply(self.Replace, (), kw)
+		self.Replace(**kw)
 		self.conf = SCons.SConf.SConf(self)
 
 		if os.path.isfile("config.cache") and self["CONFIG"] == 0 and not reconfigure:
 			try:
 				self.config_cache=load(open("config.cache", 'rb+'))
 			except:
-				print "Could not load config.cache!"
+				print("Could not load config.cache!")
 				self.config_cache={}
 		else:
 			self.config_cache={}
@@ -118,7 +115,7 @@ class XMMSEnvironment(Environment):
 		self.programs=[]
 		self.install_targets=[]
 
-		if self.has_key("INSTALLDIR"):
+		if "INSTALLDIR" in self:
 			self.installdir = os.path.normpath(self["INSTALLDIR"] + '/')
 		else:
 			self.installdir = ""
@@ -147,7 +147,7 @@ class XMMSEnvironment(Environment):
 			self.platform = sys.platform
 
 		# Where to place the xmms2 user config directory
-		if self.has_key("USERCONFDIR"):
+		if "USERCONFDIR" in self:
 			self.userconfpath = self["USERCONFDIR"]
 		else:
 			if sys.platform == 'darwin':
@@ -159,7 +156,7 @@ class XMMSEnvironment(Environment):
 				self.userconfpath = '.config/xmms2'
 
 		def gzipper(target, source, env):
-			gzip.GzipFile(target[0].path, 'wb',9).write(file(source[0].path).read())
+			gzip.GzipFile(target[0].path, 'wb',9).write(open(source[0].path, "rb").read())
 		self['BUILDERS']['GZipper'] = SCons.Builder.Builder(action=SCons.Action.Action(gzipper))
 		
 		if self.platform == 'darwin':
@@ -178,7 +175,7 @@ class XMMSEnvironment(Environment):
 		self.install_targets.append(target)
 			
 	def tryaction(self, cmd):
-		if self.config_cache.has_key(cmd):
+		if cmd in self.config_cache:
 			return self.config_cache[cmd]
 
 		r = False
@@ -199,7 +196,7 @@ class XMMSEnvironment(Environment):
 		return r
 
 	def run(self, cmd):
-		if self.config_cache.has_key(cmd):
+		if cmd in self.config_cache:
 			return self.config_cache[cmd]
 
 		try:
@@ -217,28 +214,29 @@ class XMMSEnvironment(Environment):
 		if libs:
 			cmd += " --libs" 
 		cmd += " \"%s\"" % module
-		if not self.config_cache.has_key(cmd):
-			print "Checking for %s" % module,
+		if cmd not in self.config_cache:
+			print("Checking for %s" % module, end="")
 		self.configcmd(cmd, fail)
 		
 
 	def configcmd(self, cmd, fail=False):
-		if self.config_cache.has_key(cmd):
+		if cmd in self.config_cache:
 			ret = self.config_cache[cmd]
 		else:
-			r, w, e = popen3(cmd)
+			p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, text=True)
+			r, w, e = (p.stdout, p.stdin, p.stderr)
 			ret = r.read()
 
 			if cmd.startswith("pkg-config"):
 				if ret == '':
-					print " ... no"
+					print(" ... no")
 				else:
-					print " ... yes"
+					print(" ... yes")
 			self.config_cache[cmd] = ret
 
 		if ret == '':
 			if fail:
-				print "Could not find needed group %s!!! Aborting!" % cmd
+				print("Could not find needed group %s!!! Aborting!" % cmd)
 				sys.exit(-1)
 			raise ConfigError("Command '%s' failed" % cmd)
 		ret = ret.strip()
@@ -252,33 +250,33 @@ class XMMSEnvironment(Environment):
 		else:
 			key = ("HEADER", header)
 
-		if not self.config_cache.has_key(key):
+		if key not in self.config_cache:
 			self.config_cache[key] = self.conf.CheckCHeader(header)
 		if not self.config_cache[key]:
 			if fail:
-				print "Aborting!"
+				print("Aborting!")
 				sys.exit(1)
 			raise ConfigError("Headerfile '%s' not found" % header)
 
 	def checkcompiler(self):
-		if not self.config_cache.has_key("c"):
-			print "Checking for working C compiler...",
+		if "c" not in self.config_cache:
+			print("Checking for working C compiler...", end="")
 			self.config_cache["c"] = self.conf.TryCompile("int main() {}",".c")
 			if self.config_cache["c"]:
-				print "yes"
+				print("yes")
 			else:
-				print "no"
+				print("no")
 		if not self.config_cache["c"]:
 			raise ConfigError("couldn't compile C files")
 
 	def checkcpp(self):
-		if not self.config_cache.has_key("cpp"):
-			print "Checking for working C++ compiler...",
+		if "cpp" not in self.config_cache:
+			print("Checking for working C++ compiler...", end="")
 			self.config_cache["cpp"] = self.conf.TryCompile("using namespace std; int main() {};",".cpp")
 			if self.config_cache["cpp"]:
-				print "yes"
+				print("yes")
 			else:
-				print "no"
+				print("no")
 		if not self.config_cache["cpp"]:
 			raise ConfigError("couldn't compile CPP files")
 
@@ -289,11 +287,11 @@ class XMMSEnvironment(Environment):
 		else:
 			key = ("HEADER", header)
 
-		if not self.config_cache.has_key(key):
+		if key not in self.config_cache:
 			self.config_cache[key] = self.conf.CheckCXXHeader(header)
 		if not self.config_cache[key]:
 			if fail:
-				print "Aborting!"
+				print("Aborting!")
 				sys.exit(1)
 			raise ConfigError("Headerfile '%s' not found" % header)
 
@@ -301,7 +299,7 @@ class XMMSEnvironment(Environment):
 	def checklib(self, lib, func, header=0, lang="c", fail=False):
 		key = (lib, func)
 
-		if not self.config_cache.has_key(key):
+		if key not in self.config_cache:
 			#libtool_flags = None
 
 			self.config_cache[key] = ""
@@ -324,7 +322,7 @@ class XMMSEnvironment(Environment):
 
 		if not self.config_cache[key]:
 			if fail:
-				print "Aborting!"
+				print("Aborting!")
 				sys.exit(1)
 			raise ConfigError("Symbol '%s' in library '%s' not found" % (func, lib))
 
@@ -478,14 +476,14 @@ class XMMSEnvironment(Environment):
 		if options.files:
 			for filename in options.files:
 				if os.path.exists(filename):
-					execfile(filename, cached)
+					exec(open(filename).read(), cached)
 		else:
 			return False
 	
 		for option in options.options:
 			if option.key in exclude: continue
-			if options.args.has_key(option.key):
-				if cached.has_key(option.key):
+			if option.key in options.args:
+				if option.key in cached:
 					if options.args[option.key] != cached[option.key]:
 						# differnt value
 						return True
@@ -515,7 +513,7 @@ class XMMSEnvironment(Environment):
 		This will open the libtool file and read the lines
 		that we need.
 		"""
-		f = file(libtoolfile)
+		f = open(libtoolfile)
 		line = f.readline()
 		ret = {}
 		while line:
@@ -532,13 +530,13 @@ class XMMSEnvironment(Environment):
 		targets = [cls(a[1], self) for a in self.potential_targets if a[0].startswith(targettype)]
 
 		for t in targets:
-			env = self.Copy()
+			env = self.Clone()
 			env.dir = t.dir
 		
 			try:
 				t.config(env)
 				t.add(env)
-			except ConfigError, m:
+			except ConfigError as m:
 				self.conf.logstream.write("xmmsscons: File %s reported error '%s' and was disabled.\n" % (t.target, m))
 				continue
 
--- xmms2-0.2DrDolittle/src/clients/lib/ruby/Library.orig	2006-03-27 21:34:45.000000000 +0200
+++ xmms2-0.2DrDolittle/src/clients/lib/ruby/Library	2023-05-10 22:08:47.519839891 +0200
@@ -8,14 +8,14 @@ loadable=True
 def config(env):
 	if env.tryaction ("ruby --version") :
 		# we require ruby 1.8 or greater
-		print "Checking for Ruby 1.8 or greater... ",
+		print("Checking for Ruby 1.8 or greater... ", end="")
 
 		version = env.run("ruby -e 'puts defined?(VERSION) ? VERSION : RUBY_VERSION'").strip()
 		if not version or [int(a) for a in version.split(".")] < [1, 8] :
-			print "no"
+			print("no")
 			raise ConfigError("Need ruby 1.8")
 
-		print version
+		print(version)
 
 		got_ruby_h = env.run("ruby -rrbconfig -e 'puts File.exist?(Config::CONFIG[\"archdir\"] + \"/ruby.h\")'").strip()
 		if got_ruby_h != "true" :
@@ -23,7 +23,7 @@ def config(env):
 
 		cmd = "ruby -rrbconfig -e 'puts \"-I%s -L%s\" % [].fill(Config::CONFIG[\"archdir\"], 0..1)'"
 		env.configcmd(cmd)
-		if env.has_key("RUBYARCHDIR"):
+		if "RUBYARCHDIR" in env:
 			env.librarypath = env["RUBYARCHDIR"]
 		else:
 			cmd = "ruby -rrbconfig -e 'print Config::CONFIG[\"sitearchdir\"]'"
--- xmms2-0.2DrDolittle/src/clients/lib/ruby/Library.ecore.orig	2006-03-27 21:34:45.000000000 +0200
+++ xmms2-0.2DrDolittle/src/clients/lib/ruby/Library.ecore	2023-05-10 22:09:41.692879744 +0200
@@ -14,14 +14,14 @@ def ecorelib2sed(lib):
 def config(env):
 	if env.tryaction ("ruby --version") :
 		# we require ruby 1.8 or greater
-		print "Checking for Ruby 1.8 or greater... ",
+		print("Checking for Ruby 1.8 or greater... ", end="")
 
 		version = env.run("ruby -e 'puts defined?(VERSION) ? VERSION : RUBY_VERSION'").strip()
 		if not version or [int(a) for a in version.split(".")] < [1, 8] :
-			print "no"
+			print("no")
 			raise ConfigError("")
 
-		print version
+		print(version)
 
 		got_ruby_h = env.run("ruby -rrbconfig -e 'puts File.exist?(Config::CONFIG[\"archdir\"] + \"/ruby.h\")'").strip()
 		if got_ruby_h != "true" :
@@ -29,7 +29,7 @@ def config(env):
 
 		cmd = "ruby -rrbconfig -e 'puts \"-I%s -L%s\" % [].fill(Config::CONFIG[\"archdir\"], 0..1)'"
 		env.configcmd(cmd)
-		if env.has_key("RUBYARCHDIR"):
+		if "RUBYARCHDIR" in env:
 			env.librarypath = env["RUBYARCHDIR"]
 		else:
 			cmd = "ruby -rrbconfig -e 'print Config::CONFIG[\"sitearchdir\"]'"
--- xmms2-0.2DrDolittle/src/clients/lib/ruby/Library.glib.orig	2006-03-27 21:34:45.000000000 +0200
+++ xmms2-0.2DrDolittle/src/clients/lib/ruby/Library.glib	2023-05-10 22:10:27.335965807 +0200
@@ -8,14 +8,14 @@ static=False
 def config(env):
 	if env.tryaction ("ruby --version") :
 		# we require ruby 1.8 or greater
-		print "Checking for Ruby 1.8 or greater... ",
+		print("Checking for Ruby 1.8 or greater... ", end="")
 
 		version = env.run("ruby -e 'puts defined?(VERSION) ? VERSION : RUBY_VERSION'").strip()
 		if not version or [int(a) for a in version.split(".")] < [1, 8] :
-			print "no"
+			print("no")
 			raise ConfigError("bad")
 
-		print version
+		print(version)
 
 		got_ruby_h = env.run("ruby -rrbconfig -e 'puts File.exist?(Config::CONFIG[\"archdir\"] + \"/ruby.h\")'").strip()
 		if got_ruby_h != "true" :
@@ -23,7 +23,7 @@ def config(env):
 
 		cmd = "ruby -rrbconfig -e 'puts \"-I%s -L%s\" % [].fill(Config::CONFIG[\"archdir\"], 0..1)'"
 		env.configcmd(cmd)
-		if env.has_key("RUBYARCHDIR"):
+		if "RUBYARCHDIR" in env:
 			env.librarypath = env["RUBYARCHDIR"]
 		else:
 			cmd = "ruby -rrbconfig -e 'print Config::CONFIG[\"sitearchdir\"]'"
--- xmms2-0.2DrGonzo/src/xmms/Program.orig	2023-05-13 18:34:24.915315741 +0200
+++ xmms2-0.2DrGonzo/src/xmms/Program	2023-05-13 18:34:56.695143575 +0200
@@ -25,7 +25,7 @@ source = ["main.c",
           "bindata.c"]
 
 def config(env):
-	pluginenv = env.Copy()
+	pluginenv = env.Clone()
 	env.pkgconfig("glib-2.0 >= 2.6.0", fail=True)
 	env.pkgconfig("gmodule-2.0", fail=True)
 	env.pkgconfig("gthread-2.0", fail=True)
--- xmms2-0.2DrCox/gittools.py.orig	2023-05-10 21:38:46.116265598 +0200
+++ xmms2-0.2DrCox/gittools.py	2023-05-10 21:39:29.229365368 +0200
@@ -1,9 +1,9 @@
 import os
-import sha
+import hashlib
 
 def gitsha(path):
-    h = sha.sha()
-    data = file(path).read()
+    h = hashlib.sha1()
+    data = open(path).read()
     h.update("blob %d\0" % len(data))
     h.update(data)
     return h.hexdigest()
@@ -13,12 +13,12 @@ def git_info():
     if os.getuid() == os.stat(".git/index").st_uid:
         os.system('git-update-index --refresh >/dev/null')
     else:
-        print "NOT updating git cache, local changes might not be detected"
+        print("NOT updating git cache, local changes might not be detected")
     changed = bool(os.popen('git-diff-index -r HEAD').read())
     return commithash, changed
 
 def snapshot_info():
-    info = file('commithash').read().split('\n')
+    info = open('commithash').read().split('\n')
 
     commithash = info[0]
 
--- xmms2-0.2DrGonzo/src/clients/lib/java/Library.orig	2023-05-13 18:35:17.925028563 +0200
+++ xmms2-0.2DrGonzo/src/clients/lib/java/Library	2023-05-13 18:37:16.014388818 +0200
@@ -8,42 +8,38 @@ import sys
 
 def walkDirs(path):
 	"""helper function to get a list of all subdirectories"""
-	def addDirs(pathlist, dirname, names):
-		"""internal function to pass to os.path.walk"""
-		for n in names:
-			f = os.path.join(dirname, n)
-			if os.path.isdir(f):
-				pathlist.append(f)
 	pathlist = [path]
-	os.path.walk(path, addDirs, pathlist)
+	for (dirname, dirnames, _) in os.walk(path):
+		for n in dirnames:
+			pathlist.append(os.path.join(dirname, n))
 	return pathlist
 	
 def config(env):
-	print "Checking for swig >= 1.3.25 ... ",
+	print("Checking for swig >= 1.3.25 ... ", end="")
 
 	if not env.get('SWIG'):
-		print "no"
+		print("no")
 		raise ConfigError("Couldn't find swig")
 
 	try:
 		version = env.run(env.get('SWIG') + " -version").strip().split("\n")[0].split(' ')[2]
 		
 		if not version or ([int(a) for a in version.split(".")] < [1,3,25]) :
-			print "no"
+			print("no")
 			raise ConfigError("Need Swig 1.3.25")
 	
-		print version
+		print(version)
 	except:
-		print "no"
+		print("no")
 		raise ConfigError("Couldn't check version of swig")
 
-	print "Checking for presence of java ... ",
+	print("Checking for presence of java ... ", end="")
 	
 	if not env.get('JAVAC') or not env.get('JAR'):
-		print "not present"
+		print("not present")
 		raise ConfigError("Couldn't find javac")
 	
-	print "present"
+	print("present")
 	
 	# link with xmmsclient is nice.
 	if env.platform == 'win32':
@@ -65,19 +61,19 @@ def config(env):
 			# Apple's OS X has its own special java base directory
 			java_base = '/System/Library/Frameworks/JavaVM.framework'
 		else:
-			print "Your system is missing JAVA_HOME which is needed for javabindings"
-			print "Please set JAVA_HOME and run scons with CONFIG=1 again"
+			print("Your system is missing JAVA_HOME which is needed for javabindings")
+			print("Please set JAVA_HOME and run scons with CONFIG=1 again")
 			raise ConfigError("You need to define JAVA_HOME to install the Java bindings.")
 			# Search for the java compiler
-			print "JAVA_HOME environment variable is not set. Searching for java... ",
+			print("JAVA_HOME environment variable is not set. Searching for java... ", end="")
 			jcdir = os.path.dirname(env.WhereIs('javac'))
 			if not jcdir:
-				print "not found."
+				print("not found.")
 				raise ConfigError("No javac found")
 			# assuming the compiler found is in some directory like
 			# /usr/jdkX.X/bin/javac, java's home directory is /usr/jdkX.X
 			java_base = os.path.realpath(os.path.join(jcdir, ".."))
-			print "found in %s" % java_base
+			print("found in %s" % java_base)
 			
 	if sys.platform == 'cygwin':
   		# Cygwin and Sun Java have different ideas of how path names
--- xmms2-0.2DrDolittle/src/xmms/generate-converter.py.orig	2023-05-11 17:52:42.631056661 +0200
+++ xmms2-0.2DrDolittle/src/xmms/generate-converter.py	2023-05-11 18:00:05.225311544 +0200
@@ -190,7 +190,7 @@ def make_conv(fields, curr):
 		#	return ""
 
 		out=resamplingcode
-		for key,val in curr.iteritems():
+		for key,val in curr.items():
 			out = re.sub(key,str(val),out)
 
 		out = re.sub("CONVERTER",
@@ -236,15 +236,15 @@ def make_switch(fields, curr):
 	val += indent + "}\n"
 	return val
 
-print readwriters
-print make_conv(data.keys(),{})
+print(readwriters)
+print(make_conv(list(data.keys()),{}))
 
-print "static xmms_sample_conv_func_t"
-print "xmms_sample_conv_get (guint inchannels, xmms_sample_format_t intype,"
-print "                      guint outchannels, xmms_sample_format_t outtype,"
-print "                      gboolean resample)"
-print "{"
-print make_switch(data.keys(),{})
-print "\treturn NULL;"
-print "}"
+print("static xmms_sample_conv_func_t")
+print("xmms_sample_conv_get (guint inchannels, xmms_sample_format_t intype,")
+print("                      guint outchannels, xmms_sample_format_t outtype,")
+print("                      gboolean resample)")
+print("{")
+print(make_switch(list(data.keys()),{}))
+print("\treturn NULL;")
+print("}")
 
