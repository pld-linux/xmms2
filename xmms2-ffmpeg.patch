--- xmms2-0.8DrO_o/src/plugins/avcodec/avcodec.c.orig	2011-10-20 21:26:08.000000000 +0200
+++ xmms2-0.8DrO_o/src/plugins/avcodec/avcodec.c	2023-06-24 12:35:16.781344459 +0200
@@ -134,7 +134,6 @@ xmms_avcodec_init (xmms_xform_t *xform)
 
 	xmms_xform_private_data_set (xform, data);
 
-	avcodec_init ();
 	avcodec_register_all ();
 
 	mimetype = xmms_xform_indata_get_str (xform,
@@ -200,7 +199,7 @@ xmms_avcodec_init (xmms_xform_t *xform)
 		}
 	}
 
-	data->codecctx = avcodec_alloc_context ();
+	data->codecctx = avcodec_alloc_context3 (codec);
 	data->codecctx->sample_rate = data->samplerate;
 	data->codecctx->channels = data->channels;
 	data->codecctx->bit_rate = data->bitrate;
@@ -211,7 +210,7 @@ xmms_avcodec_init (xmms_xform_t *xform)
 	data->codecctx->codec_id = codec->id;
 	data->codecctx->codec_type = codec->type;
 
-	if (avcodec_open (data->codecctx, codec) < 0) {
+	if (avcodec_open2 (data->codecctx, codec, NULL) < 0) {
 		XMMS_DBG ("Opening decoder '%s' failed", codec->name);
 		goto err;
 	} else {
@@ -263,7 +262,6 @@ xmms_avcodec_read (xmms_xform_t *xform,
                    xmms_error_t *error)
 {
 	xmms_avcodec_data_t *data;
-	char outbuf[AVCODEC_MAX_AUDIO_FRAME_SIZE];
 	gint outbufsize, bytes_read = 0;
 	guint size;
 
@@ -272,6 +270,8 @@ xmms_avcodec_read (xmms_xform_t *xform,
 
 	size = MIN (data->outbuf->len, len);
 	while (size == 0) {
+		int got_frame = 0;
+		AVFrame *frame;
 		AVPacket packet;
 		av_init_packet (&packet);
 
@@ -330,9 +330,13 @@ xmms_avcodec_read (xmms_xform_t *xform,
 		packet.data = data->buffer;
 		packet.size = data->buffer_length;
 
-		outbufsize = sizeof (outbuf);
-		bytes_read = avcodec_decode_audio3 (data->codecctx, (short *) outbuf,
-		                                    &outbufsize, &packet);
+		frame = av_frame_alloc();
+		if (frame == NULL) {
+			XMMS_DBG ("AVFrame allocation failed");
+			return -1;
+		}
+
+		bytes_read = avcodec_decode_audio4 (data->codecctx, frame, &got_frame, &packet);
 
 		/* The DTS decoder of ffmpeg is buggy and always returns
 		 * the input buffer length, get frame length from header */
@@ -344,6 +348,7 @@ xmms_avcodec_read (xmms_xform_t *xform,
 		}
 
 		if (bytes_read < 0 || bytes_read > data->buffer_length) {
+			av_frame_free(&frame);
 			XMMS_DBG ("Error decoding data!");
 			return -1;
 		} else if (bytes_read != data->buffer_length) {
@@ -354,9 +359,11 @@ xmms_avcodec_read (xmms_xform_t *xform,
 
 		data->buffer_length -= bytes_read;
 
-		if (outbufsize > 0) {
-			g_string_append_len (data->outbuf, outbuf, outbufsize);
+		if (got_frame) {
+			outbufsize = av_samples_get_buffer_size(NULL, data->codecctx->channels, frame->nb_samples, data->codecctx->sample_fmt, 1);
+			g_string_append_len (data->outbuf, frame->data[0], outbufsize);
 		}
+		av_frame_free(&frame);
 
 		size = MIN (data->outbuf->len, len);
 	}
@@ -371,7 +378,6 @@ static gint64
 xmms_avcodec_seek (xmms_xform_t *xform, gint64 samples, xmms_xform_seek_mode_t whence, xmms_error_t *err)
 {
 	xmms_avcodec_data_t *data;
-	char outbuf[AVCODEC_MAX_AUDIO_FRAME_SIZE];
 	gint outbufsize, bytes_read = 0;
 	gint64 ret = -1;
 
@@ -391,14 +397,21 @@ xmms_avcodec_seek (xmms_xform_t *xform,
 	/* The buggy ape decoder doesn't flush buffers, so we need to finish decoding
 	 * the frame before seeking to avoid segfaults... this hack sucks */
 	while (data->buffer_length > 0) {
+		int got_frame = 0;
+		AVFrame *frame;
 		AVPacket packet;
 		av_init_packet (&packet);
 		packet.data = data->buffer;
 		packet.size = data->buffer_length;
 
-		outbufsize = sizeof (outbuf);
-		bytes_read = avcodec_decode_audio3 (data->codecctx, (short *) outbuf,
-		                                    &outbufsize, &packet);
+		frame = av_frame_alloc();
+		if (frame == NULL) {
+			XMMS_DBG ("AVFrame allocation failed");
+			return -1;
+		}
+
+		bytes_read = avcodec_decode_audio4 (data->codecctx, frame, &got_frame, &packet);
+		av_frame_free(&frame);
 
 		if (bytes_read < 0 || bytes_read > data->buffer_length) {
 			XMMS_DBG ("Error decoding data!");
