--- xmms2-0.5DrLecter/src/clients/lib/ruby/wscript.orig	2023-05-21 14:20:34.466607748 +0200
+++ xmms2-0.5DrLecter/src/clients/lib/ruby/wscript	2023-05-21 14:57:59.467778866 +0200
@@ -56,25 +56,25 @@ def configure(conf):
     conf.check_message('ruby version', '> 1.8', True, version_str)
 
     if version == [1, 8]: # Ruby 1.8
-        ruby_h = os.popen(ruby + " -rrbconfig -e 'puts File.exist?(Config::CONFIG[\"archdir\"] + \"/ruby.h\")'").read().strip()
+        ruby_h = os.popen(ruby + " -rrbconfig -e 'puts File.exist?(RbConfig::CONFIG[\"archdir\"] + \"/ruby.h\")'").read().strip()
     else: # Ruby 1.9
-        ruby_h = os.popen(ruby + " -rrbconfig -e 'puts File.exist?(Config::CONFIG[\"rubyhdrdir\"] + \"/ruby.h\")'").read().strip()
+        ruby_h = os.popen(ruby + " -rrbconfig -e 'puts File.exist?(RbConfig::CONFIG[\"rubyhdrdir\"] + \"/ruby.h\")'").read().strip()
     if ruby_h != 'true':
         conf.check_message('ruby', 'header file', False)
         return False
     conf.check_message('ruby', 'header file', True)
 
-    dir = os.popen(ruby + " -rrbconfig -e 'puts \"%s\" % [].fill(Config::CONFIG[\"archdir\"], 0..1)'").read().strip()
+    dir = os.popen(ruby + " -rrbconfig -e 'puts \"%s\" % [].fill(RbConfig::CONFIG[\"archdir\"], 0..1)'").read().strip()
     conf.env["CPPPATH_ruby"] = [dir]
     conf.env["LINKFLAGS_ruby"] = '-L%s' % dir
 
-    if version == [1, 9]: # Ruby 1.9
-        hdir = os.popen(ruby + " -rrbconfig -e 'puts Config::CONFIG[\"rubyhdrdir\"]'").read().strip()
+    if version >= [1, 9]: # Ruby 1.9
+        hdir = os.popen(ruby + " -rrbconfig -e 'puts RbConfig::CONFIG[\"rubyhdrdir\"]'").read().strip()
         conf.env["CPPPATH_ruby"] += [hdir, os.path.join(hdir, "ruby")]
-        hdir = os.popen(ruby + " -rrbconfig -e 'puts File.join(Config::CONFIG[\"rubyhdrdir\"], Config::CONFIG[\"arch\"])'").read().strip()
+        hdir = os.popen(ruby + " -rrbconfig -e 'puts File.join(RbConfig::CONFIG[\"rubyhdrdir\"], RbConfig::CONFIG[\"arch\"])'").read().strip()
         conf.env["CPPPATH_ruby"] += [hdir]
 
-    lib = os.popen(ruby + " -rrbconfig -e 'print Config::CONFIG[\"RUBY_SO_NAME\"]'").read().strip()
+    lib = os.popen(ruby + " -rrbconfig -e 'print RbConfig::CONFIG[\"RUBY_SO_NAME\"]'").read().strip()
 
     # Check for rb_protect_inspect for our inspect methods.
     test = conf.create(enumerator='function')
@@ -86,7 +86,7 @@ def configure(conf):
     if test.run():
         conf.env['CCDEFINES_ruby'] = ['HAVE_PROTECT_INSPECT']
 
-    ldflags = os.popen(ruby + " -rrbconfig -e 'print Config::CONFIG[\"LDSHARED\"]'").read().strip()
+    ldflags = os.popen(ruby + " -rrbconfig -e 'print RbConfig::CONFIG[\"LDSHARED\"]'").read().strip()
     # ok this is really stupid, but the command and flags are combined.
     # so we try to find the first argument...
     flags = ldflags.split()
@@ -94,21 +94,21 @@ def configure(conf):
         flags = flags[1:]
     conf.env["LINKFLAGS_ruby"] += " "+" ".join(flags)
 
-    ldflags = os.popen(ruby + " -rrbconfig -e 'print Config::CONFIG[\"LIBS\"]'").read().strip()
+    ldflags = os.popen(ruby + " -rrbconfig -e 'print RbConfig::CONFIG[\"LIBS\"]'").read().strip()
     conf.env["LINKFLAGS_ruby"] += " "+ldflags
-    ldflags = os.popen(ruby + " -rrbconfig -e 'print Config::CONFIG[\"LIBRUBYARG_SHARED\"]'").read().strip()
+    ldflags = os.popen(ruby + " -rrbconfig -e 'print RbConfig::CONFIG[\"LIBRUBYARG_SHARED\"]'").read().strip()
     conf.env["LINKFLAGS_ruby"] += " "+ldflags
 
-    cflags = os.popen(ruby + " -rrbconfig -e 'print Config::CONFIG[\"CCDLFLAGS\"]'").read().strip()
+    cflags = os.popen(ruby + " -rrbconfig -e 'print RbConfig::CONFIG[\"CCDLFLAGS\"]'").read().strip()
     conf.env["CCFLAGS_ruby"] = cflags
 
     if not Params.g_options.rubyarchdir:
-        conf.env["ARCHDIR_ruby"] = os.popen(ruby + " -rrbconfig -e 'print Config::CONFIG[\"sitearchdir\"]'").read().strip()
+        conf.env["ARCHDIR_ruby"] = os.popen(ruby + " -rrbconfig -e 'print RbConfig::CONFIG[\"sitearchdir\"]'").read().strip()
     else:
         conf.env["ARCHDIR_ruby"] = Params.g_options.rubyarchdir
 
     if not Params.g_options.rubylibdir:
-        conf.env["LIBDIR_ruby"] = os.popen(ruby + " -rrbconfig -e 'print Config::CONFIG[\"sitelibdir\"]'").read().strip()
+        conf.env["LIBDIR_ruby"] = os.popen(ruby + " -rrbconfig -e 'print RbConfig::CONFIG[\"sitelibdir\"]'").read().strip()
     else:
         conf.env["LIBDIR_ruby"] = Params.g_options.rubylibdir
 
@@ -123,7 +123,7 @@ def configure(conf):
                 + 'ruby bindings to be installed to ' + conf.env['LIBDIR_ruby'])
 
     conf.env["rubyext_PREFIX"] = ''
-    conf.env["rubyext_SUFFIX"] = '.' + os.popen(ruby + " -rrbconfig -e 'print Config::CONFIG[\"DLEXT\"]'").read().strip()
+    conf.env["rubyext_SUFFIX"] = '.' + os.popen(ruby + " -rrbconfig -e 'print RbConfig::CONFIG[\"DLEXT\"]'").read().strip()
     conf.env["rubyext_USELIB"] = "ruby"
     conf.env["rubyext_obj_ext"] = conf.env["shlib_obj_ext"]
 
--- xmms2-0.2DrJekyll/src/clients/lib/ruby/rb_xmmsclient.c.orig	2023-05-14 19:24:29.670968613 +0200
+++ xmms2-0.2DrJekyll/src/clients/lib/ruby/rb_xmmsclient.c	2023-05-14 19:29:16.606080819 +0200
@@ -1371,10 +1371,10 @@ parse_string_array (VALUE value)
 	if (!NIL_P (rb_check_array_type (value))) {
 		struct RArray *ary = RARRAY (value);
 
-		ret = malloc (sizeof (char *) * (ary->len + 1));
+		ret = malloc (sizeof (char *) * (RARRAY_LEN(ary) + 1));
 
-		for (i = 0; i < ary->len; i++)
-			ret[i] = StringValuePtr (ary->ptr[i]);
+		for (i = 0; i < RARRAY_LEN(ary); i++)
+			ret[i] = StringValuePtr (RARRAY_PTR(ary)[i]);
 
 		ret[i] = NULL;
 	} else {
--- xmms2-0.2DrJekyll/src/clients/lib/ruby/rb_playlist.c.orig	2007-05-20 17:55:40.000000000 +0200
+++ xmms2-0.2DrJekyll/src/clients/lib/ruby/rb_playlist.c	2023-05-18 20:59:44.461066374 +0200
@@ -301,10 +301,10 @@ c_sort (VALUE self, VALUE props)
 	if (!NIL_P (props = rb_check_array_type (props))) {
 		ary = RARRAY (props);
 
-		cprops = malloc (sizeof (char *) * (ary->len + 1));
+		cprops = malloc (sizeof (char *) * (RARRAY_LEN(ary) + 1));
 
-		for (i = 0; i < ary->len; i++)
-			cprops[i] = StringValuePtr (ary->ptr[i]);
+		for (i = 0; i < RARRAY_LEN(ary); i++)
+			cprops[i] = StringValuePtr (RARRAY_PTR(ary)[i]);
 
 		cprops[i] = NULL;
 	} else if (!NIL_P (rb_check_string_type (props))) {
--- xmms2-0.5DrLecter/src/clients/lib/ruby/rb_collection.c.orig	2008-06-15 19:31:38.000000000 +0200
+++ xmms2-0.5DrLecter/src/clients/lib/ruby/rb_collection.c	2023-05-21 15:05:06.452132360 +0200
@@ -241,10 +241,10 @@ c_coll_idlist_set (VALUE self, VALUE ids
 	COLL_METHOD_HANDLER_HEADER
 
 	rb_ary = RARRAY (ids);
-	ary = malloc (sizeof (unsigned int *) * (rb_ary->len + 1));
+	ary = malloc (sizeof (unsigned int *) * (RARRAY_LEN(rb_ary) + 1));
 
-	for (i = 0; i < rb_ary->len; i++)
-		ary[i] = NUM2UINT (rb_ary->ptr[i]);
+	for (i = 0; i < RARRAY_LEN(rb_ary); i++)
+		ary[i] = NUM2UINT (RARRAY_PTR(rb_ary)[i]);
 
 	ary[i] = 0;
 
@@ -285,8 +285,8 @@ attrs_inspect_cb (VALUE args, VALUE s)
 {
 	VALUE key, value;
 
-	key = RARRAY (args)->ptr[0];
-	value = RARRAY (args)->ptr[1];
+	key = RARRAY_PTR (args)[0];
+	value = RARRAY_PTR (args)[1];
 
 	if (RSTRING_LEN (s) > 1)
 		rb_str_buf_cat2 (s, ", ");
